// project-wide `build.gradle`

// Version Settings, loaded from version.properties
if(rootProject.file('version.properties').exists()) {
    def version = new Properties()
    version.load(new FileInputStream(rootProject.file('version.properties')))
    project.ext.set('applicationId',       version['applicationId'])
    project.ext.set('versionName',         version['versionName'])
    project.ext.set('versionCode',         new Integer(version['versionCode']))
    project.ext.set('compileSdkVersion',   new Integer(version['compileSdkVersion']))
    project.ext.set('targetSdkVersion',    new Integer(version['targetSdkVersion']))
    project.ext.set('minSdkVersion',       new Integer(version['minSdkVersion']))
} else {
    logger.warn('file version.properties is missing.')
}

// Keystore Settings, loaded from keystore.properties
if(rootProject.file('keystore.properties').exists()) {
    def keystore = new Properties()
    keystore.load(new FileInputStream(rootProject.file('keystore.properties')))
    project.ext.set('debugKeystorePass',   keystore['debugKeystorePass'])
    project.ext.set('debugKeyAlias',       keystore['debugKeyAlias'])
    project.ext.set('debugKeyPass',        keystore['debugKeyPass'])
    project.ext.set('releaseKeystorePass', keystore['releaseKeystorePass'])
    project.ext.set('releaseKeyAlias',     keystore['releaseKeyAlias'])
    project.ext.set('releaseKeyPass',      keystore['releaseKeyPass'])
} else {
    logger.warn('file keystore.properties is missing.')
}

// Build Script
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://developer.huawei.com/repo/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.2.2"
        classpath "com.google.firebase:firebase-appdistribution-gradle:3.0.1"
        classpath "com.google.firebase:firebase-crashlytics-gradle:2.9.1"
        classpath "com.google.firebase:perf-plugin:1.4.1"
        classpath "com.google.gms:google-services:4.3.13"
    }
}

// Modules
allprojects {

    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

    // when projects were evaluated
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// rootProject > clean
task clean(type: Delete) {

    // cleanup Gradle logs
    def gradle = project.getGradle()
    new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
        if (it.getName().endsWith('.out.log')) {
            println(":clean removed: $it")
            it.delete()
        }
    }

    // delete build directories
    delete rootProject.buildDir
    delete project.buildDir
}
